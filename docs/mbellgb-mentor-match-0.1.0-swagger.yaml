swagger: '2.0'
info:
  version: "0.1.0"
  title: ATOS Mentor Match
  description: This is an example of using OAuth2 Password Flow in a specification to describe security to your API.
schemes:
 - https
 
# Under securityDefinitions we declare which security schemes can be used.
# These definitions do not affect to the operations, but can be applied
# using the 'security' key at the global level or the operation level.
# In this sample, we'll see how to apply the security definition globally,
# and override it at the operation level.
#
# Note that for Password Flow, you must provide the Token URL.
securityDefinitions:
  password:
    type: oauth2
    # This should be updated to the Token URL of your OAuth provider.
    tokenUrl: http://example.com/oauth/token
    flow: password
    scopes:
      write: allows modifying resources
      read: allows reading resources
      admin: allows admin control, if the user is an admin.

# Here we apply the security flow called 'password' globally to all the opeartions in the spec. 
# This security scheme is defined above in the 'securityDefinitions' section.
# Global security can be overriden an operation level as seen in the example below
security:
  - password:
    - read
    - write
    - admin
tags:
- name: "user"
  description: "operations concerning a user directly"
paths:
  /user/{username}:
    get:
      tags:
      - "user"
      summary: Find user by username
      description: Returns a user's profile.
      operationId: getUserByUsername
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "username of the user to find"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/user'
        404:
          description: "user not found"
    put:
      tags:
      - "user"
      summary: Update user by username
      description: Updates an existing user's profile. Can only be done by the logged in user or by an admin.
      operationId: updateUserByUsername
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "username of the user to update"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
        403:  
          description: "user is not the same as the logged in user."
        404:
          description: "user not found"
  /user/{username}/image:
    get:
      tags:
      - "user"
      summary: Find user profile image by username
      description: Returns a given user's profile image, if they have set one.
      operationId: getUserImageByUsername
      produces:
      - "image/*"
      parameters:
      - name: "username"
        in: "path"
        description: "username of the user to find image for"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
        204:
          description: "user exists but has not set a profile image"
        404:
          description: "user not found"
    put:
      tags:
      - "user"
      summary: Set user profile image by username
      description: "Updates an existing user's profile image. Can only be done by the logged in user or by an admin. Maxmimum file size determined by server's maxFileUploadSize property, whichcan be found within /info response."
      operationId: updateUserImageByUsername
      parameters:
      - name: "username"
        in: "path"
        description: "username of the user to find image for"
        required: true
        type: "string"
      - name: "image"
        in: "formData"
        description: "image to use"
        required: true
        type: "file"
      responses:
        200:
          description: "successful operation"
        405:
          description: "image size larger than server's global maxFileUploadSize property, should be scaled down."
        404:
          description: "user not found"
        403:  
          description: "user is not the same as the logged in user."
  /user/{username}/mentorships:
    get:
      tags: ["user"]
      summary: Get user's mentorships
      description: "Returns array of mentorships user is signed up for. Can only be done by the logged in user or by an admin."
      operationId: getUserMentorshipsByUsername
      parameters:
      - name: "username"
        in: "path"
        description: "username of the user to find mentorships for"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: object
            properties:
              mentorships:
                type: array
                items:
                  $ref: '#/definitions/userMentorship'
        204:
          description: "user exists but is not participating in a mentorship"
        403:
          description: "user does not have access (not same as logged in user or user isn't admin)"
        404:
          description: "user not found"
  /user/{username}/mentorships/{mentorshipId}:
    get:
      tags: ["user"]
      summary: Get specific user mentorship
      description: "Returns a mentorship a user is participating in, given a specific mentorship id. Can only be done by the logged in user or by an admin."
      operationId: getUserMentorshipByUsernameAndId
      parameters:
      - name: "username"
        in: "path"
        description: "username of the user to find mentorship for"
        required: true
        type: "string"
      - name: "mentorshipId"
        in: "path"
        description: "id of the mentorship to find"
        required: true
        type: "integer"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/userMentorship'
        403: 
          description: "user does not have access (not same as logged in user or user isn't admin"
        404:
          description: "user not found or mentorship not found"
  /ping:
    get:
      summary: Server heartbeat operation
      description: This operation shows how to override the global security defined above, as we want to open it up for all users.
      # We want to require no security schemes and override the globally define security scheme.
      # To do that, we simply provide an empty array to the 'security' property.
      security: [ ]
      responses:
        200:
          description: OK
          
definitions:
  user:
    type: object
    properties:
      username:
        type: "string"
        description: "unique identifier for the user. used to find a user. by default, this will be the first half of the user's email address."
      email:
        type: "string"
        example: "johnsmith@atos.com"
        description: "unique email address for the user."
      name:
        type: "string"
        description: "the user's full name"
        example: "John Smith"
      preferredName:
        type: "string"
        description: "the user's preferred name. by default, the user's first name, but may be a shortened name instead."
      joinDate:
        type: "string"
        format: "date-time"
        description: "the date the user joined the company"
      position:
        type: "string"
        description: "the user's current job title"
      department:
        type: "string"
        description: "the user's current work department"
      isAdmin:
        type: "boolean"
        description: "true if the user is an admin, false if not"
  userMentorship:
    type: object
    properties:
      id:
        type: integer
        description: "the unique id to reference this mentorship"
      role:
        type: string
        enum: ["mentor", "mentee"]
        description: "given user's role."
      partner:
        $ref: '#/definitions/user'
      programme:
        type: integer
        description: "unique id to reference the programme involved in"
        #TODO: Use reference to programme def

# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /