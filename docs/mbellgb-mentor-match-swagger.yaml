swagger: '2.0'
info:
  version: "0.1.0"
  title: ATOS Mentor Match
  description: API documentation for the ATOS Mentor Match project.
schemes:
 - https

# Under securityDefinitions we declare which security schemes can be used.
# These definitions do not affect to the operations, but can be applied
# using the 'security' key at the global level or the operation level.
# In this sample, we'll see how to apply the security definition globally,
# and override it at the operation level.
#
# Note that for Password Flow, you must provide the Token URL.
securityDefinitions:
  password:
    type: oauth2
    # This should be updated to the Token URL of your OAuth provider.
    tokenUrl: http://api.dev.mbell.me/auth/token/
    flow: password
    scopes:
      read: Read your user details and associated mentorships
      write: Modify your profile and sign up for mentorships
      messages: View and send messages to mentors/mentees
      staff: Perform staff operations (if you're a staff member), like creating/modifying your mentorships
      admin: Perform adminisration options if you're an admin
  authcode:
    type: oauth2
    # This should be updated to the Token URL of your OAuth provider.
    tokenUrl: http://api.dev.mbell.me/auth/token/
    authorizationUrl: http://api.dev.mbell.me/auth/token/
    flow: accessCode
    scopes:
      read: Read your user details and associated mentorships
      write: Modify your profile and sign up for mentorships
      messages: View and send messages to mentors/mentees
      staff: Perform staff operations (if you're a staff member), like creating/modifying your mentorships
      admin: Perform adminisration options if you're an admin

# Here we apply the security flow called 'password' globally to all the opeartions in the spec.
# This security scheme is defined above in the 'securityDefinitions' section.
# Global security can be overriden an operation level as seen in the example below
security:
  - password:
    - read
    - write
tags:
- name: "user"
  description: "operations concerning a user directly"
- name: "mentorship"
  description: "operations concerning a mentorship"
paths:
  /user/:
    get:
      tags:
      - "user"
      summary: Get list of users
      description: Returns a list of all users.
      security:
      - password:
        - read
        - admin
      operationId: listUsers
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: array
            items:
              $ref: '#/definitions/user'
        401:
          description: "you are not logged in"
        403:
          description: "You do not have admin privileges"
    post:
      tags:
      - "user"
      summary: Create new user
      description: Create a new user.
      security: []
      operationId: createUser
      produces: ['application/json']
      parameters:
      - name: "user"
        in: body
        description: "details of the user to add"
        required: true
        schema:
          $ref: '#/definitions/user_signup_object'
      consumes: ['application/json']
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/user'
  /user/{userId}/:
    get:
      tags:
      - "user"
      summary: Find user by id
      description: Returns a user's profile.
      operationId: getUserById
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "id of the user to find"
        required: true
        type: "integer"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/user'
        404:
          description: "user not found"
    patch:
      tags:
      - "user"
      summary: Update user by id
      description: Updates an existing user's profile. Can only be done by the logged in user or by an admin.
      operationId: updateUserById
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "id of the user to update"
        required: true
        type: "integer"
      - name: "user"
        in: body
        description: "updated user details (those that have changed)"
        required: true
        schema:
          $ref: '#/definitions/user'
      responses:
        200:
          description: "successful operation"
        403:
          description: "user is not the same as the logged in user."
        404:
          description: "user not found"
  /user/{userId}/image/:
    get:
      tags:
      - "user"
      summary: Find user profile image by username
      description: Returns a given user's profile image, if they have set one.
      operationId: getUserImageById
      produces:
      - "image/*"
      parameters:
      - name: "userId"
        in: "path"
        description: "id of the user to find image for"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
        204:
          description: "user exists but has not set a profile image"
        404:
          description: "user not found"
    put:
      tags:
      - "user"
      summary: Set user profile image by id
      description: "Updates an existing user's profile image. Can only be done by the logged in user or by an admin. Maxmimum file size determined by server's maxFileUploadSize property, whichcan be found within /info response."
      operationId: updateUserImageById
      consumes: ["multipart/form-data"]
      parameters:
      - name: "userId"
        in: "path"
        description: "id of the user to find image for"
        required: true
        type: "string"
      - name: "image"
        in: "formData"
        description: "image to use"
        required: true
        type: "file"
      responses:
        200:
          description: "successful operation"
        405:
          description: "image size larger than server's global maxFileUploadSize property, should be scaled down."
        404:
          description: "user not found"
        403:
          description: "user is not the same as the logged in user."
  /user/{userId}/mentorships/:
    get:
      tags: ["user", "mentorship"]
      summary: Get user's mentorships
      description: "Returns array of mentorships user is signed up for. Can only be done by the logged in user or by an admin."
      operationId: getUserMentorshipsById
      parameters:
      - name: "userId"
        in: "path"
        description: "id of the user to find mentorships for"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: object
            properties:
              mentorships:
                type: array
                items:
                  $ref: '#/definitions/userMentorship'
        204:
          description: "user exists but is not participating in a mentorship"
        403:
          description: "user does not have access (not same as logged in user or user isn't admin)"
        404:
          description: "user not found"
  /user/{userId}/mentorships/{mentorshipId}/:
    get:
      tags: ["user", "mentorship"]
      summary: Get specific user mentorship
      description: "Returns a mentorship a user is participating in, given a specific mentorship id. Can only be done by the logged in user or by an admin."
      operationId: getSpecificUserMentorshipById
      parameters:
      - name: "userId"
        in: "path"
        description: "id of the user to find mentorship for"
        required: true
        type: "string"
      - name: "mentorshipId"
        in: "path"
        description: "id of the mentorship to find"
        required: true
        type: "integer"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/userMentorship'
        403:
          description: "user does not have access (not same as logged in user or user isn't admin"
        404:
          description: "user not found or mentorship not found"
  /user/me/:
    get:
      tags:
      - "user"
      summary: Find logged in user
      description: Returns the logged in user's profile.
      operationId: getUserByLoggedIn
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/user'
        401:
          description: "you are not logged in"
    patch:
      tags:
      - "user"
      summary: Update the logged in user.
      description: Updates the logged in user's profile.
      operationId: updateUserByLoggedIn
      produces:
      - "application/json"
      parameters:
      - name: "user"
        in: body
        description: "changed user details"
        required: true
        schema:
          $ref: '#/definitions/user'
      responses:
        200:
          description: "successful operation"
        401:
          description: "you are not logged in"
  /ping:
    get:
      summary: Server heartbeat operation
      description: This operation shows how to override the global security defined above, as we want to open it up for all users.
      # We want to require no security schemes and override the globally define security scheme.
      # To do that, we simply provide an empty array to the 'security' property.
      security: [ ]
      responses:
        200:
          description: OK

definitions:
  user:
    type: object
    properties:
      id:
        type: "integer"
        description: "unique identifier for the user. used to find a user."
      email:
        type: "string"
        example: "johnsmith@atos.com"
        description: "unique email address for the user."
      first_name:
        type: "string"
        description: "the user's first name"
        example: "John"
      last_name:
        type: "string"
        description: "the user's last name"
        example: "Smith"
      profile:
        $ref: '#/definitions/user_profile'
  user_signup_object:
    type: object
    required: ['email', 'password']
    properties:
      email:
        type: "string"
        example: "johnsmith@atos.com"
        description: "unique email address for the user."
      password:
        type: "string"
        description: "the user's password"
        example: "hunter2"
      first_name:
        type: "string"
        description: "the user's first name"
        example: "John"
      last_name:
        type: "string"
        description: "the user's last name"
        example: "Smith"
      profile:
        $ref: '#/definitions/user_profile'
  user_profile:
    type: object
    properties:
      joinDate:
        type: "string"
        format: "date"
        description: "the date the user joined the company"
        example: "2017-01-01"
      position:
        type: "string"
        description: "the user's current job title"
        example: "Manager"
      department:
        type: "string"
        description: "the user's current work department"
        example: "IT"
      bio:
        type: "string"
        description: "the user's description about themselves"
        example: "I like people, places and things"
  userMentorship:
    type: object
    properties:
      id:
        type: integer
        description: "the unique id to reference this mentorship"
      role:
        type: string
        enum: ["mentor", "mentee"]
        description: "given user's role."
      partner:
        $ref: '#/definitions/user'
      programme:
        type: integer
        description: "unique id to reference the programme involved in"
        #TODO: Use reference to programme def

# Added by API Auto Mocking Plugin
host: api.dev.mbell.me
basePath: /
