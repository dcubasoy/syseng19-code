swagger: '2.0'
info:
  version: "0.1.1"
  title: ATOS Mentor Match
  description: This is the API to programmatically access data for the ATOS Mentor Matching project, created by Matthew Bell, Christopher Lau, and Harry Chen on behalf of UCL Computer Science and ATOS UK & Ireland.
schemes:
 - https
 
# Under securityDefinitions we declare which security schemes can be used.
# These definitions do not affect to the operations, but can be applied
# using the 'security' key at the global level or the operation level.
# In this sample, we'll see how to apply the security definition globally,
# and override it at the operation level.
#
# Note that for Password Flow, you must provide the Token URL.
securityDefinitions:
  password:
    type: oauth2
    # This should be updated to the Token URL of your OAuth provider.
    tokenUrl: http://example.com/oauth/token
    flow: password
    scopes:
      write: allows modifying resources
      read: allows reading resources
      admin: allows admin control, if the user is an admin.

security:
  - password:
    - read
    - write
    - admin
tags:
- name: "user"
  description: "operations concerning a user directly"
- name: "mentorship"
  description: "operations concerning a mentorship"
- name: "programme"
  description: "operations concerning a mentorship programme"
paths:
  /user/{userId}:
    get:
      tags:
      - "user"
      summary: Find user by id
      description: Returns a user's profile.
      operationId: getUserById
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "id of the user to find"
        required: true
        type: "integer"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/user'
        404:
          description: "user not found"
    patch:
      tags:
      - "user"
      summary: Update user by id
      description: Updates an existing user's profile. Can only be done by the logged in user or by an admin.
      operationId: updateUserById
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "id of the user to update"
        required: true
        type: "integer"
      - name: "user"
        in: "body"
        description: "updated fields to change"
        required: true
        schema:
          $ref: '#/definitions/user'
      responses:
        200:
          description: "successful operation"
        403:  
          description: "user is not the same as the logged in user."
        404:
          description: "user not found"
  /user/{userId}/image:
    get:
      tags:
      - "user"
      summary: Find user profile image by username
      description: Returns a given user's profile image, if they have set one.
      operationId: getUserImageById
      produces:
      - "image/*"
      parameters:
      - name: "userId"
        in: "path"
        description: "id of the user to find image for"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
        204:
          description: "user exists but has not set a profile image"
        404:
          description: "user not found"
    put:
      tags:
      - "user"
      summary: Set user profile image by id
      description: "Updates an existing user's profile image. Can only be done by the logged in user or by an admin. Maxmimum file size determined by server's maxFileUploadSize property, whichcan be found within /info response."
      operationId: updateUserImageById
      parameters:
      - name: "userId"
        in: "path"
        description: "id of the user to find image for"
        required: true
        type: "string"
      - name: "image"
        in: "formData"
        description: "image to use"
        required: true
        type: "file"
      responses:
        200:
          description: "successful operation"
        400:
          description: "image size larger than server's global maxFileUploadSize property, should be scaled down."
        404:
          description: "user not found"
        403:  
          description: "user is not the same as the logged in user."
  /user/{userId}/mentorships:
    get:
      tags: ["user", "mentorship"]
      summary: Get user's mentorships
      description: "Returns array of mentorships user is signed up for. Can only be done by the logged in user or by an admin."
      operationId: getUserMentorshipsById
      parameters:
      - name: "userId"
        in: "path"
        description: "id of the user to find mentorships for"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: array
            items:
              $ref: '#/definitions/userMentorship'
        204:
          description: "user exists but is not participating in a mentorship"
        403:
          description: "user does not have access (not same as logged in user or user isn't admin)"
        404:
          description: "user not found"
  /user/{userId}/mentorships/{mentorshipId}:
    get:
      tags: ["user", "mentorship"]
      summary: Get specific user mentorship
      description: "Returns a mentorship a user is participating in, given a specific mentorship id. Can only be done by the logged in user or by an admin."
      operationId: getSpecificUserMentorshipById
      parameters:
      - name: "userId"
        in: "path"
        description: "id of the user to find mentorship for"
        required: true
        type: "string"
      - name: "mentorshipId"
        in: "path"
        description: "id of the mentorship to find"
        required: true
        type: "integer"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/userMentorship'
        403: 
          description: "user does not have access (not same as logged in user or user isn't admin"
        404:
          description: "user not found or mentorship not found"
  /programme:
    get:
      tags: ["programme"]
      summary: Get list of programmes
      description: "Returns a list of the mentorship programmes on the system"
      operationId: getProgrammes
      parameters: []
      security: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: array
            items:
              $ref: '#/definitions/programme'
        204:
          description: "There are no programmes."
    post:
      tags: ["programme"]
      summary: Create new programme
      description: "Creates a new mentorship programme. Can only be performed by an admin."
      operationId: createProgramme
      parameters:
      - name: "programme"
        in: "body"
        description: "The programme to be created"
        schema:
          $ref: '#/definitions/programme'
        required: true
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/programme'
        403:
          description: "logged in user is not an admin"
  /programme/{programmeId}:
    get:
      tags: ["programme"]
      summary: Get programme by id
      description: "Finds a programme given its unique id."
      operationId: getProgrammeById
      security: []
      parameters:
      - name: "programmeId"
        in: "path"
        description: "the id of the programme to find"
        type: 'integer'
        required: true
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/programme'
        404:
          description: "programme not found"
    patch:
      tags: ["programme"]
      summary: Update programme by id
      description: "Updates a programme given its unique id. Can only be performed by an admin."
      operationId: updateProgrammeById
      parameters:
      - name: "programmeId"
        in: "path"
        description: "the id of the programme to find"
        type: "integer"
        required: true
      - name: "programmeData"
        in: body
        required: true
        description: "updated values to use for the given programme"
        schema:
          $ref: '#/definitions/programme'
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: '#/definitions/programme'
        400:
          description: "one of the provided values does not pass validation."
        403:
          description: "logged in user is not an admin."
  /programme/{programmeId}/logoImage:
    get:
      tags: ["programme"]
      summary: Get logo of programme by id
      description: "Returns the logo of a programme given its unique id. Returns 404 if it does not exist."
      operationId: getProgrammeLogoById
      parameters:
      - name: "programmeId"
        in: "path"
        description: "the id of the programme to find"
        type: "integer"
        required: true
      produces: [ "image/*" ]
      responses:
        200:
          description: "operation successful"
        404:
          description: "no logo provided for this programme, use a default image"
    put:
      tags:
      - "programme"
      summary: Set programme logo by id
      description: "Updates an existing programme's logo image. Can only be performed by an admin. Maxmimum file size determined by server's maxFileUploadSize property, whichcan be found within /info response."
      operationId: updateProgrammeLogoById
      parameters:
      - name: "programmeId"
        in: "path"
        description: "id of the programme to update logo for"
        required: true
        type: "string"
      - name: "image"
        in: "formData"
        description: "image to use"
        required: true
        type: "file"
      responses:
        200:
          description: "successful operation"
        400:
          description: "image size larger than server's global maxFileUploadSize property, should be scaled down."
        404:
          description: "programme not found"
        403:  
          description: "logged in user is not an admin"
  /programme/{programmeId}/bannerImage:
    get:
      tags: ["programme"]
      summary: Get banner image of programme by id
      description: "Returns the banner image of a programme given its unique id. Returns 404 if it does not exist."
      operationId: getProgrammeBannerImageById
      parameters:
      - name: "programmeId"
        in: "path"
        description: "the id of the programme to find"
        type: "integer"
        required: true
      produces: [ "image/*" ]
      responses:
        200:
          description: "operation successful"
        404:
          description: "no banner image provided for this programme, use a default image"
    put:
      tags:
      - "programme"
      summary: Set programme banner image by id
      description: "Updates an existing programme's banner image. Can only be performed by an admin. Maxmimum file size determined by server's maxFileUploadSize property, whichcan be found within /info response."
      operationId: updateProgrammeBannerImageById
      parameters:
      - name: "programmeId"
        in: "path"
        description: "id of the programme to update logo for"
        required: true
        type: "string"
      - name: "image"
        in: "formData"
        description: "image to use"
        required: true
        type: "file"
      responses:
        200:
          description: "successful operation"
        400:
          description: "image size larger than server's global maxFileUploadSize property, should be scaled down."
        404:
          description: "programme not found"
        403:  
          description: "logged in user is not an admin"
  /programme/{programmeId}/cohorts:
    get:
      tags: ["programme","cohort"]
      summary: Get list of programme's cohorts
      description: "Returns an array of the cohorts that a programme has, given its unique id."
      operationId: getProgrammeCohortsById
      parameters:
      - name: "programmeId"
        in: "path"
        description: "id of the programme to show cohorts for"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: array
            items:
              $ref: '#/definitions/cohort'
        204:
          description: "successful operation, but this programme has no cohorts"
        404:
          description: "programme not found"
    post:
      tags: ["programme","cohort"]
      summary: Add new cohort
      description: "Creates a new cohort for the given programme. Must be performed by an admin, and open/close dates should not overlap with an existing cohort for this programme."
      operationId: createProgrammeCohortById
      parameters:
      - name: "programmeId"
        in: "path"
        description: "id of the programme to add cohort for"
        required: true
        type: "string"
      - name: "cohort"
        in: "body"
        description: "details of the new cohort to add"
        schema:
          $ref: '#/definitions/cohort'
      responses:
        200:
          description: "operation successful"
          schema:
            $ref: '#/definitions/cohort'
        400:
          description: "missing attributes or attributes fail validation"
          #TODO: add return schema
        403:
          description: "logged in user is not an admin"
        404:
          description: "programme not found"
  /ping:
    get:
      summary: Server heartbeat operation
      description: This operation shows how to override the global security defined above, as we want to open it up for all users.
      # We want to require no security schemes and override the globally define security scheme.
      # To do that, we simply provide an empty array to the 'security' property.
      security: [ ]
      responses:
        200:
          description: OK
          
definitions:
  user:
    type: object
    properties:
      id:
        type: "integer"
        description: "unique identifier for the user. used to find a user."
      email:
        type: "string"
        example: "johnsmith@atos.com"
        description: "unique email address for the user."
      name:
        type: "string"
        description: "the user's full name"
        example: "John Smith"
      preferredName:
        type: "string"
        description: "the user's preferred name. by default, the user's first name, but may be a shortened name instead."
      joinDate:
        type: "string"
        format: "date-time"
        description: "the date the user joined the company"
      position:
        type: "string"
        description: "the user's current job title"
      department:
        type: "string"
        description: "the user's current work department"
      isAdmin:
        type: "boolean"
        description: "true if the user is an admin, false if not"
      bio:
        type: "string"
        description: "user's own description, formatted in Markdown"
  userMentorship:
    type: object
    properties:
      id:
        type: integer
        description: "the unique id to reference this mentorship"
      role:
        type: string
        enum: ["mentor", "mentee"]
        description: "given user's role."
      partner:
        $ref: '#/definitions/user'
      programme:
        $ref: '#/definitions/programme'
      cohort:
        type: integer
        description: "unique id to reference the cohort enrolled in"
        #TODO: Use reference to cohort def
  programme:
    type: object
    description: "a mentorship programme"
    required:
    - "id"
    - "name"
    - "createdBy"
    properties:
      id:
        type: "integer"
        description: "unique identifier for the programme."
      name:
        type: "string"
        description: "human-readable name of the programme."
      description:
        type: "string"
        description: "description of the programme, in Markdown format."
      defaultCohortSize:
        type: "integer"
        description: "the default size for this programme's cohorts, may be 0 which means no default."
      createdBy:
        $ref: '#/definitions/user'
      openForApplications:
        type: "boolean"
        description: "returns true if the current cohort is open for applications, false if not."
      mostRecentCohort:
        type: "integer"
        description: "returns id of the current or most recent cohort. does not return cohorts that occur in the future."
  cohort:
    type: object
    description: "a cohort of a mentorship programme"
    required: []
    properties:
      id:
        type: "integer"
        description: "unique identifier for the cohort"
      programme:
        type: "integer"
        description: "id of this cohort's programme."
      cohortSize:
        type: "integer"
        description: "maximum capacity of this cohort. default is the programme's defaultCohortSize"
      openDate:
        type: "date-time"
        description: "The date/time that this cohort opens for registration"
      closeDate:
        type: "date-time"
        description: "The date/time that this cohort closes for applications. default: two weeks after openDate."
      matchDate:
        type: "date-time"
        description: "The date/time that this cohort closes for matching preferences. default: three days after matchDate."
      createdBy:
        $ref: '#/definitions/user'

# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /
